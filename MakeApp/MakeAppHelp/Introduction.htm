<!doctype html>
<html><!-- InstanceBegin template="/Templates/OneColumnPage.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>MakeApp</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->
<link href="App.css" rel="stylesheet" type="text/css">
</head>

<body>

<div class="container">
<div class="content">
<!-- InstanceBeginEditable name="Title" -->
<h1>MakeApp</h1>
<!-- InstanceEndEditable -->

<!-- InstanceBeginEditable name="Body" -->
<h2>Introduction</h2>
<p>
MakeApp copies TestApp to a new directory (usually in the same directory as Library parent
directory).  MakeApp requires just a little information to produce the first version of the
application.
</p>
<p>
The first step is to identify the parent directory of the application.  The Library
should have the same parent directory.  The first toolbar icon (which appears like a folder)
will bring up a folder dialog box to define the parent folder.
</p>
<p>
The second toolbar icon (which purports to be a factory) brings up a dialog box which asks
for three items:
<ul>
<li>The Project Name, usually one word</li>
<li>The Visible Name (which will show up on the windows title bar)</li>
<li>The Window Description (which will also show up on the window title bar)</li>
</ul>
When OK is selected the new application is created.  But the only thing that happens is that all the files are displayed in the window.
</p>
<p>
The last step, after reviewing the files, is to write all the files to the new directory.
The directory structure looks a little like this:
<ul>
<li>ProjectName
  <ul>
    <li>ProjectName -- The directory in which the the VS solution file is stored</li>
    <li>ProjectName.proj -- The directory in which the project files are stored</li>
    <li>ProjectNameHelp -- The directory in which the help files are stored</li>
  </ul>
</li>
<li>Library -- The top most directory of the Library</li>
</ul>
</p>

<h2>SlickEdit</h2>
<p>
SlickEdit is a dandy editor which integrates well with Visual Studio.  However, the list of build
operations seems upside down to me so the third icon (which is a facsimile of the SlickEdit icon) will open the SlickEdit project file (...vpj) reorder the build so the most used commands are on 
top.  
</p>
<!-- InstanceEndEditable -->
</div><!-- end .content -->
</div><!-- end .container -->
</body>
<!-- InstanceEnd --></html>
